{"version":3,"sources":["apis/dnd5eapi.js","actions/index.js","components/FilterSpells.js","components/SortSpells.js","components/SpellDescription.js","components/DailySpellListItem.js","components/MobileSpellListItem.js","isMobile.js","components/SpellList.js","components/Spellbook.js","components/SpellSlots.js","components/DailySpells.js","components/AllSpells.js","components/ErrorMessage.js","components/App.js","reducers/index.js","index.js"],"names":["axios","create","baseURL","timeout","selectAllSpellsSpell","spell","dispatch","getState","a","currentUser","spellbookSpells","dailySpells","newSpellBookSpells","currentUserSpellBook","some","el","slug","filter","spellInBook","post","spellBookSpells","map","newDailySpells","spellInDailySpell","type","payload","message","FilterSpells","this","props","apiData","classes","dndClass","Button","key","active","selectedFilters","tabName","includes","name","onClick","selectSpellFilterClass","Popup","hoverable","on","content","Group","className","renderClassSpellFilterButtons","trigger","style","marginLeft","Component","connect","state","spellFilterClassName","SortSpells","sorter","selectedSorter","selectSortSpellLevel","renderClassSpellSortButtons","icon","Icon","sorterName","SpellDescription","level","school","casting_time","range","components","duration","desc","higher_level","DailySpellListItem","modalOpen","arg","setState","spellLevel","spellSlots","castSpell","Modal","closeIcon","onClose","setOpen","onOpen","open","List","Item","wide","basic","size","header","disabled","isMobile","Header","Content","Description","Actions","level_int","labelPosition","positive","newSpellSlots","index","MobileSpellListItem","spellSelected","spellListMonitors","actions","selectSpellAction","negative","test","navigator","userAgent","SpellList","spells","filterSpellClassNames","dnd_class","isAlphaUp","sortedSpell","sort","b","reverse","Checkbox","label","checked","spellsToRender","length","getFilteredSpells","numberOfSpells","sortSpells","noSpellsMessage","requiresSorterHeaders","numberOfColumns","Math","ceil","AllSpellsColumns","columnNum","curSpellIndexMin","curSpellIndexMax","push","Grid","Column","selection","slice","curIndex","renderSpellListItem","columns","stackable","doubling","Container","textAlign","Message","compact","Segment","renderAllSpellsIntoColumns","Spellbook","showHeader","selectSpellbookSpell","currentDailySpells","SpellSlots","spellSlotHeaders","mobileTable","Table","unstackable","definition","celled","fullWidth","Row","HeaderCell","colSpan","display","refillSpellSlots","Body","Cell","Input","value","toString","onChange","event","data","setMaxSpellSlots","parseInt","maxSpellSlots","newCurSpellSlots","currentSpellSlots","DailySpells","windowWidth","AllSpells","ErrorMessage","handleDismiss","closeErrorMessage","errorMessage","onDismiss","App","activeItem","document","documentElement","clientWidth","mobileSidebarVisible","handleItemClick","e","fetchAPIData","checkLogInStatus","getCurrentUser","console","log","window","addEventListener","appReadytoRender","Menu","href","position","loginStatus","color","attached","tabular","marginRight","alt","src","height","width","margin","target","link","renderLoginMenuItem","renderActiveTab","Sidebar","Pushable","as","marginTop","animation","onHide","vertical","visible","Pusher","dimmed","borderless","appReady","error","renderMobileApp","renderDesktopApp","Dimmer","Dimmable","Loader","whiteSpace","renderAppOnFetchComplete","listOfNonSpellCasters","pageNum","pageNumEnd","dnd5eapi","get","response","status","results","classFromAPI","res","serializedSpellBookSpells","serializedDailySpells","filterDefault","allSpells","sortDefault","spellSlotsDefault","combineReducers","action","complete","spellFilters","newFilters","JSON","parse","stringify","classFilterList","spellSorters","user","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.d642197d.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport default axios.create({\r\n    baseURL: 'https://api.open5e.com',\r\n    timeout: 10000\r\n});","import axios from 'axios';\r\nimport dnd5eapi from '../apis/dnd5eapi';\r\n\r\n// Check Log in status\r\nexport const checkLogInStatus = () => async (dispatch, getState) => {\r\n    try {\r\n        await axios.get('/api/status');\r\n        dispatch({ type: 'LOG_IN_STATUS_SUCCESS' });\r\n        return true;\r\n    } catch (err) { // backend status is not good\r\n        dispatch({ type: 'LOG_IN_STATUS_FAIL' });\r\n        dispatch({\r\n            type: 'ACTIVATE_ERROR_MESSAGE',\r\n            payload: { type: 'Log in currently unavailable', message: 'We are currently facing an issue with our log in service. Sorry!' }\r\n        });\r\n        throw err;\r\n    }\r\n};\r\n\r\n// Check if current user is logged in, and if so, serialize spell names from user lists into spells from api\r\nexport const getCurrentUser = () => async (dispatch, getState) => {\r\n    try {\r\n        const { apiData } = getState();\r\n        const res = await axios.get('/api/current_user');\r\n        const serializedSpellBookSpells = apiData.spells.filter(spell => res.data.spellBookSpells.includes(spell.slug));\r\n        const serializedDailySpells = apiData.spells.filter(spell => res.data.dailySpells.includes(spell.slug));\r\n        dispatch(\r\n            {\r\n                type: 'FETCH_USER',\r\n                payload: { ...res.data, spellBookSpells: serializedSpellBookSpells, dailySpells: serializedDailySpells }\r\n            });\r\n        return true;\r\n    } catch (err) {\r\n        dispatch({ type: 'FETCH_USER', payload: '' });\r\n        return false;\r\n    }\r\n}\r\n\r\n// Fetch API data Action Creator\r\nexport const fetchAPIData = () => async (dispatch) => {\r\n    const listOfNonSpellCasters = ['Barbarian', 'Fighter', 'Monk', 'Rogue'];\r\n    let data = { spells: [], classes: [] }\r\n    let pageNum = 1;\r\n    const pageNumEnd = 7;\r\n    try {\r\n        // Fetch spell Data from API\r\n        for (pageNum; pageNum < pageNumEnd + 1; pageNum++) {\r\n            let response = await dnd5eapi.get('/spells/?page=' + pageNum.toString());\r\n            if (response.status === 200) {\r\n                data.spells = [...data.spells, ...response.data.results]\r\n            }\r\n        }\r\n        // Fetch class data from API\r\n        let response = await dnd5eapi.get('/classes');\r\n        if (response.status === 200) {\r\n            data.classes = response.data.results.filter(classFromAPI => !listOfNonSpellCasters.includes(classFromAPI.name));\r\n        }\r\n        dispatch({ type: 'API_DATA_FETCHED', payload: data });\r\n        return true;\r\n    } catch (err) {\r\n        console.log(err);\r\n        dispatch({ type: 'API_DATA_ERROR' });\r\n        throw err;\r\n    }\r\n};\r\n\r\n// App ready to render action\r\nexport const appReadytoRender = () => {\r\n    return {\r\n        type: 'APP_READY',\r\n    };\r\n};\r\n\r\n// Select Spellbook Spell Action Creator\r\nexport const selectSpellbookSpell = (spell) => async (dispatch, getState) => {\r\n    const { currentUser, dailySpells } = getState();\r\n    // Check if user signed in\r\n    if (currentUser) {\r\n        try {\r\n            const currentDailySpells = dailySpells;\r\n            const newDailySpells = currentDailySpells.some(el => el.slug === spell.slug) ?\r\n                currentDailySpells.filter(spellInDailySpell => spellInDailySpell.slug !== spell.slug) : [...currentDailySpells, spell];\r\n            await axios.post('/api/current_user/dailyspells', { dailySpells: newDailySpells.map(spell => spell.slug) });\r\n        } catch {\r\n            dispatch({ // error in saving spell book spell to account\r\n                type: 'ACTIVATE_ERROR_MESSAGE',\r\n                payload: { type: 'Error in selecting spellbook spell', message: 'Could not save spellbook spell selection to your account.' }\r\n            });\r\n        }\r\n    }\r\n    dispatch({ type: 'SPELLBOOK_SPELL_SELECT', payload: spell });\r\n};\r\n\r\n// Select All Spell Action Creator\r\nexport const selectAllSpellsSpell = (spell) => async (dispatch, getState) => {\r\n    const { currentUser, spellbookSpells, dailySpells } = getState();\r\n    // Check if user signed in\r\n    if (currentUser) {\r\n        try {\r\n            const currentUserSpellBook = spellbookSpells;\r\n            const newSpellBookSpells = currentUserSpellBook.some(el => el.slug === spell.slug) ?\r\n                currentUserSpellBook.filter(spellInBook => spellInBook.slug !== spell.slug) : [...currentUserSpellBook, spell];\r\n            await axios.post('/api/current_user/spellbookspells', { spellBookSpells: newSpellBookSpells.map(spell => spell.slug) });\r\n            // Do we need to remove a spell from Daily spell?\r\n            if (dailySpells.some(el => el.slug === spell.slug)) {\r\n                const newDailySpells = dailySpells.filter(spellInDailySpell => spellInDailySpell.slug !== spell.slug);\r\n                await axios.post('/api/current_user/dailyspells', { dailySpells: newDailySpells.map(spell => spell.slug) });\r\n            }\r\n        } catch { // error in saving all spell select to account\r\n            dispatch({\r\n                type: 'ACTIVATE_ERROR_MESSAGE',\r\n                payload: { type: 'Error in selecting spell', message: 'Could not save spell select to your account.' }\r\n            });\r\n        }\r\n\r\n    }\r\n    dispatch({ type: 'ALL_SPELLS_SPELL_SELECT', payload: spell });\r\n};\r\n\r\n// Filter Spells by Dnd Class Action Creator\r\nexport const selectSpellFilterClass = (spellFilterClassName, tabName) => {\r\n    return {\r\n        type: 'SPELL_FILTER_CLASS_SELECT',\r\n        payload: { spellFilterClassName: spellFilterClassName, tabName: tabName }\r\n    };\r\n};\r\n\r\n// Sort Spells by Level Action Creator\r\nexport const selectSortSpellLevel = (sorterName, tabName) => {\r\n    return {\r\n        type: 'SORT_SPELLS_SELECT',\r\n        payload: { sorterName: sorterName, tabName: tabName }\r\n    };\r\n};\r\n\r\n// Cast spell from Daily Spells Tab\r\nexport const castSpell = (spellLevel) => async (dispatch, getState) => {\r\n    const { currentUser, spellSlots } = getState();\r\n    // check if user is signed in\r\n    if (currentUser) {\r\n        try {\r\n            const newSpellSlots = spellSlots.map((el, index) => index + 1 === spellLevel ? [el[0] - 1, el[1]] : el);\r\n            await axios.post('/api/current_user/spellslots', { spellSlots: newSpellSlots });\r\n        } catch { // error in saving spell cast to account\r\n            dispatch({\r\n                type: 'ACTIVATE_ERROR_MESSAGE',\r\n                payload: { type: 'Error in casting spell', message: 'Could not save spell cast to your account.' }\r\n            });\r\n        }\r\n    }\r\n    dispatch({ type: 'CAST_SPELL', payload: { spellLevel: spellLevel } });\r\n};\r\n\r\n// Refill spell slots on Daily Spells Tab\r\nexport const refillSpellSlots = () => async (dispatch, getState) => {\r\n    const { currentUser, spellSlots } = getState();\r\n    // check if user is signed in\r\n    if (currentUser) {\r\n        try {\r\n            const newSpellSlots = spellSlots.map(el => [el[1], el[1]]);\r\n            await axios.post('/api/current_user/spellslots', { spellSlots: newSpellSlots });\r\n        } catch { // error in saving refill spell slots to account\r\n            dispatch({\r\n                type: 'ACTIVATE_ERROR_MESSAGE',\r\n                payload: { type: 'Error in refilling spell slots', message: 'Could not save spell slot refill to your account.' }\r\n            });\r\n        }\r\n    }\r\n    dispatch({ type: 'REFILL_SPELL_SLOTS' });\r\n};\r\n\r\n// Set max spell slots on Daily Spells Tab\r\nexport const setMaxSpellSlots = (spellLevel, maxSpellSlots) => async (dispatch, getState) => {\r\n    if (!maxSpellSlots || maxSpellSlots < 0) {\r\n        maxSpellSlots = 0;\r\n    }\r\n    const { currentUser, spellSlots } = getState();\r\n    // check if user is signed in\r\n    if (currentUser) {\r\n        try {\r\n            const currentSpellSlots = spellSlots;\r\n            const newCurSpellSlots = (currentSpellSlots[spellLevel - 1][0] > maxSpellSlots) ? maxSpellSlots : spellSlots[spellLevel - 1][0]\r\n            const newSpellSlots = currentSpellSlots.map((el, index) => ((index + 1) === spellLevel) ? [newCurSpellSlots, maxSpellSlots] : el);\r\n            await axios.post('/api/current_user/spellslots', { spellSlots: newSpellSlots });\r\n        } catch { // error in setting max spell slot to account\r\n            dispatch({\r\n                type: 'ACTIVATE_ERROR_MESSAGE',\r\n                payload: { type: 'Error in setting spell slots', message: 'Could not save spell slots change to your account.' }\r\n            });\r\n        }\r\n    }\r\n    dispatch({ type: 'SET_MAX_SPELL_SLOTS', payload: { spellLevel: spellLevel, maxSpellSlots: maxSpellSlots } });\r\n};\r\n\r\n// Close Error Message Action Creator\r\nexport const closeErrorMessage = () => {\r\n    return {\r\n        type: 'CLOSE_ERROR_MESSAGE'\r\n    };\r\n};","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Popup, Button } from \"semantic-ui-react\";\r\nimport { selectSpellFilterClass } from \"../actions\";\r\n\r\nclass FilterSpells extends Component {\r\n  renderClassSpellFilterButtons() {\r\n    return this.props.apiData.classes.map((dndClass) => (\r\n      <Button key={dndClass.slug}\r\n        active={this.props.selectedFilters[this.props.tabName].classes.includes(dndClass.name)}\r\n        onClick={() => this.props.selectSpellFilterClass(dndClass.name, this.props.tabName)}>\r\n        {dndClass.name}\r\n      </Button>\r\n    ));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Popup hoverable on={['click']}\r\n        content={<Button.Group className='stackable'>{this.renderClassSpellFilterButtons()}</Button.Group>}\r\n        trigger={<Button style={{ marginLeft: '5px' }}>Filter</Button>} />\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    apiData: state.apiData,\r\n    selectedFilters: state.selectedFilters\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { selectSpellFilterClass })(FilterSpells);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Popup, Button, Icon } from \"semantic-ui-react\";\r\nimport { selectSortSpellLevel } from \"../actions\";\r\n\r\nclass SortSpells extends Component {\r\n  renderClassSpellSortButtons() {\r\n    const sortFunctions = [\r\n      { 'name': 'Level', 'slug': 'level_int' },\r\n      { 'name': 'School', 'slug': 'school' }]\r\n    return sortFunctions.map((sorter) => (\r\n      <Button key={sorter.slug + this.props.tabName + 'sorter'}\r\n        active={this.props.selectedSorter[this.props.tabName] === sorter.slug}\r\n        onClick={() => this.props.selectSortSpellLevel(sorter.slug, this.props.tabName)}>\r\n        {sorter.name}\r\n      </Button>\r\n    ));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Popup hoverable on={['click']}\r\n        content={\r\n          <Button.Group className='stackable'>\r\n            {this.renderClassSpellSortButtons()}\r\n            <Button icon\r\n              active={this.props.selectedSorter[this.props.tabName] === 'alpha-down'}\r\n              onClick={() => this.props.selectSortSpellLevel('alpha-down', this.props.tabName)}>\r\n              <Icon name='sort alphabet down' />\r\n            </Button>\r\n            <Button icon\r\n              active={this.props.selectedSorter[this.props.tabName] === 'alpha-up'}\r\n              onClick={() => this.props.selectSortSpellLevel('alpha-up', this.props.tabName)}>\r\n              <Icon name='sort alphabet up' />\r\n            </Button>\r\n          </Button.Group>}\r\n        trigger={<Button>Sort</Button>} />\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    apiData: state.apiData,\r\n    selectedSorter: state.selectedSorter\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { selectSortSpellLevel })(SortSpells);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass SpellDescription extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <p>\r\n        <br />\r\n        <b>{this.props.spell.level} {this.props.spell.school}</b><br />\r\n        <b>Casting Time:</b> {this.props.spell.casting_time}<br />\r\n        <b>Range:</b> {this.props.spell.range}<br />\r\n        <b>Components:</b> {this.props.spell.components}<br />\r\n        <b>Duration:</b> {this.props.spell.duration}<br />\r\n        <br />\r\n        {this.props.spell.desc}\r\n        <br />\r\n        {this.props.spell.higher_level}\r\n      </p>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    apiData: state.apiData,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, {})(SpellDescription);","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { List, Modal, Popup, Button } from \"semantic-ui-react\";\r\nimport SpellDescription from './SpellDescription';\r\nimport { castSpell } from '../actions';\r\n\r\nclass DailySpellListItem extends Component {\r\n    state = {\r\n        modalOpen: false\r\n    };\r\n    setOpen(arg) {\r\n        this.setState({modalOpen: arg})\r\n    }\r\n    castSpell(spellLevel) {\r\n        if (spellLevel !== 0 && this.props.spellSlots[spellLevel - 1][0] > 0) {\r\n            this.props.castSpell(spellLevel)\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <Modal closeIcon\r\n                onClose={() => this.setOpen(false)}\r\n                onOpen={() => this.setOpen(true)}\r\n                open={this.state.modalOpen}\r\n                trigger={\r\n                    <List.Item>\r\n                        <Popup wide='very' basic size='small' header={this.props.spell.name}\r\n                            disabled={this.props.isMobile}\r\n                            content={<SpellDescription spell={this.props.spell} />}\r\n                            trigger={<p className='dailySpellName'>{this.props.spell.name}</p>} />\r\n                    </List.Item>}>\r\n                <Modal.Header>{this.props.spell.name}</Modal.Header>\r\n                <Modal.Content>\r\n                    <Modal.Description>\r\n                        <SpellDescription spell={this.props.spell} />\r\n                    </Modal.Description>\r\n                </Modal.Content>\r\n                <Modal.Actions>\r\n                    {(this.props.spell.level_int !== 0) ?\r\n                        <p key='-cast-message' size='small' style={{\r\n                            'display': 'inline-block',\r\n                            'color': (this.props.spellSlots[this.props.spell.level_int - 1][0] === 0) ? 'red' : ''\r\n                        }}>\r\n                            {(this.props.spellSlots[this.props.spell.level_int - 1][0] === 0) ?\r\n                                'You have no available ' + this.props.spell.level + ' spell slots!' :\r\n                                this.props.spell.level + ' spell slots available: ' + this.props.spellSlots[this.props.spell.level_int - 1][0]}\r\n                        </p> : null}\r\n                    <Button\r\n                        key='cast-spell'\r\n                        content='Cast Spell'\r\n                        labelPosition='right'\r\n                        icon='magic'\r\n                        onClick={() => {this.setOpen(false); this.castSpell(this.props.spell.level_int);}}\r\n                        positive\r\n                        disabled={this.props.spell.level_int !== 0 && this.props.spellSlots[this.props.spell.level_int - 1][0] <= 0}\r\n                    />\r\n                </Modal.Actions>\r\n            </ Modal>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        spellSlots: state.spellSlots\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, { castSpell })(DailySpellListItem);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { List, Modal, Icon } from \"semantic-ui-react\";\r\nimport SpellDescription from './SpellDescription';\r\n\r\nclass MobileSpellListItem extends Component {\r\n    render() {\r\n        const spellSelected = this.props.spellListMonitors.some(el => el.slug === this.props.spell.slug);\r\n        return (\r\n            <Modal closeIcon\r\n                trigger={\r\n                    <List.Item>\r\n                        {this.props.spell.name}\r\n                        {spellSelected ? <Icon className='mobile-spell-check-icon' name='check'/> : null}\r\n                    </List.Item>}\r\n                header={this.props.spell.name}\r\n                content={\r\n                    <div className='content'>\r\n                        <SpellDescription spell={this.props.spell} />\r\n                    </div>}\r\n                actions={[\r\n                    {\r\n                        key: 'select-spell',\r\n                        icon: spellSelected ? 'remove' : 'add',\r\n                        content: spellSelected ? 'Remove Spell' : 'Add Spell',\r\n                        labelPosition: 'right',\r\n                        onClick: () => this.props.selectSpellAction(this.props.spell),\r\n                        positive: !spellSelected,\r\n                        negative: spellSelected\r\n                    }]} />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        spellbookSpells: state.spellbookSpells,\r\n        dailySpells: state.dailySpells\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, {})(MobileSpellListItem);\r\n","// checks if on mobile device\r\nlet isMobile = false;\r\nif( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) {\r\n    isMobile = true;\r\n}\r\n\r\nexport default isMobile;","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { List, Checkbox, Grid, Message, Container, Popup, Segment } from \"semantic-ui-react\";\r\nimport SpellDescription from './SpellDescription';\r\nimport DailySpellListItem from './DailySpellListItem';\r\nimport MobileSpellListItem from './MobileSpellListItem';\r\nimport { selectAllSpellsSpell } from \"../actions\";\r\nimport isMobile from '../isMobile';\r\n\r\nclass SpellList extends Component {\r\n  getFilteredSpells() {\r\n    return this.props.spells.filter((spell) =>\r\n      this.props.selectedFilters[this.props.tabName].classes.some((filterSpellClassNames) =>\r\n        spell.dnd_class.includes(filterSpellClassNames))\r\n    );\r\n  }\r\n  sortSpells(sorter, spells) {\r\n    let isAlphaUp = sorter === 'alpha-up';\r\n    sorter = (sorter === 'alpha-down' || sorter === 'alpha-up') ? 'slug' : sorter;\r\n    let sortedSpell = spells.sort((a, b) => {\r\n      if (a[sorter] < b[sorter]) {\r\n        return -1;\r\n      }\r\n      if (a[sorter] > b[sorter]) {\r\n        return 1;\r\n      }\r\n      return 0;\r\n    });\r\n    return isAlphaUp ? sortedSpell.reverse() : sortedSpell;\r\n  }\r\n  renderSpellListItem(spell) {\r\n    if (this.props.tabName === 'dailySpells') {\r\n      return <DailySpellListItem isMobile={isMobile} key={this.props.tabName + \"-spells-\" + spell.slug} spell={spell} />\r\n    } else if (isMobile) { // all spells or spell book mobile\r\n      return (\r\n        <MobileSpellListItem key={this.props.tabName + \"-spells-\" + spell.slug}\r\n          spellListMonitors={this.props.spellListMonitors}\r\n          selectSpellAction={this.props.selectSpellAction}\r\n          spell={spell} />\r\n      );\r\n    }\r\n    return ( // all spells or spell book desktop\r\n      <List.Item key={this.props.tabName + \"-spells-\" + spell.slug}>\r\n        <Popup disabled={isMobile} on='hover' wide='very' basic size='small' header={spell.name}\r\n          content={<SpellDescription spell={spell} />}\r\n          trigger={\r\n            <Checkbox\r\n              label={spell.name}\r\n              checked={this.props.spellListMonitors.some(el => el.slug === spell.slug)}\r\n              onClick={() => this.props.selectSpellAction(spell)} />} />\r\n      </List.Item>\r\n    );\r\n  }\r\n\r\n  renderAllSpellsIntoColumns() {\r\n    let spellsToRender = (this.props.selectedFilters[this.props.tabName].classes.length) ?\r\n      this.getFilteredSpells() : this.props.spells;\r\n    const numberOfSpells = spellsToRender.length;\r\n    const selectedSorter = this.props.selectedSorter[this.props.tabName];\r\n    spellsToRender = (selectedSorter.length) ? this.sortSpells(selectedSorter, spellsToRender) : spellsToRender;\r\n    const requiresSorterHeaders = selectedSorter === 'level_int' || selectedSorter === 'school';\r\n    if (numberOfSpells > 0) {\r\n      const maxSpellInColumn = 60;\r\n      const numberOfColumns = Math.ceil(numberOfSpells / maxSpellInColumn);\r\n      let AllSpellsColumns = [];\r\n      for (let columnNum = 1; columnNum < numberOfColumns + 1; columnNum++) {\r\n        let curSpellIndexMin = 0 + ((columnNum - 1) * maxSpellInColumn);\r\n        let curSpellIndexMax = (numberOfSpells <= (columnNum * maxSpellInColumn))\r\n          ? numberOfSpells : (columnNum * maxSpellInColumn) - 1;\r\n        AllSpellsColumns.push(\r\n          (<Grid.Column key={columnNum}>\r\n            <List selection={this.props.tabName === 'dailySpells' || isMobile}>\r\n              {spellsToRender.slice(curSpellIndexMin, curSpellIndexMax).map((spell, index) => {\r\n                let curIndex = curSpellIndexMin + index;\r\n                if (requiresSorterHeaders &&\r\n                  (curIndex === 0 || (spellsToRender[curIndex - 1][selectedSorter] !== spellsToRender[curIndex][selectedSorter]))) {\r\n                  return ([\r\n                    <h3 className='spellListHeader' key={this.tabName + '-' + selectedSorter + '-header'}>\r\n                      {(selectedSorter === 'level_int') ? spellsToRender[curIndex].level : spellsToRender[curIndex][selectedSorter]}\r\n                    </h3>, this.renderSpellListItem(spell)])\r\n                }\r\n                return this.renderSpellListItem(spell)\r\n              })}\r\n            </List>\r\n          </Grid.Column>))\r\n      }\r\n      return <Grid className=\"spellListGrid\" columns={numberOfColumns} stackable doubling>{AllSpellsColumns}</Grid>;\r\n    } else { // spells to render is empty\r\n      let noSpellsMessage;\r\n      if (this.props.spells.length && this.props.selectedFilters[this.props.tabName].classes.length) {\r\n        noSpellsMessage = 'There are no spells defined by the selected filters.'\r\n      } else {\r\n        noSpellsMessage = (this.props.tabName === 'dailySpells') ?\r\n          'You have not prepared any spells! Please select your prepared spells from the Spell Book tab.' :\r\n          'This spell book is empty! Select spells in the All Spells tab to add to this spell book.'\r\n      }\r\n      return (\r\n        <Container textAlign='center'>\r\n          <Message compact>\r\n            <Message.Header>No Spells Available</Message.Header>\r\n            <p>{noSpellsMessage}</p>\r\n          </Message>\r\n        </Container>\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Segment>\r\n        {this.renderAllSpellsIntoColumns()}\r\n      </Segment>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    spellbookSpells: state.spellbookSpells,\r\n    selectedFilters: state.selectedFilters,\r\n    selectedSorter: state.selectedSorter\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { selectAllSpellsSpell })(SpellList);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Icon } from \"semantic-ui-react\";\r\nimport FilterSpells from './FilterSpells';\r\nimport SortSpells from './SortSpells';\r\nimport SpellList from './SpellList';\r\nimport { selectSpellbookSpell } from \"../actions\";\r\n\r\nclass Spellbook extends Component {\r\n  render() {\r\n    return (\r\n      <div className='tabContent'>\r\n        <FilterSpells tabName='spellBookSpells' />\r\n        <SortSpells tabName='spellBookSpells' />\r\n        {this.props.showHeader ? <h3 style={{textAlign: 'center'}}><Icon name='book' /> Spell Book </h3> : null}\r\n        <SpellList tabName='spellBookSpells'\r\n          spells={this.props.spellbookSpells}\r\n          spellListMonitors={this.props.dailySpells}\r\n          selectSpellAction={spell => this.props.selectSpellbookSpell(spell)} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    spellbookSpells: state.spellbookSpells,\r\n    dailySpells: state.dailySpells\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { selectSpellbookSpell })(Spellbook);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Table, Input, Button } from \"semantic-ui-react\";\r\nimport { setMaxSpellSlots, refillSpellSlots } from \"../actions\";\r\n\r\nclass SpellSlots extends Component {\r\n    constructor() {\r\n        super();\r\n        this.spellSlotHeaders = ['1st Level', '2nd Level', '3rd Level', '4th-Level', '5th Level', '6th Level',\r\n            '7th Level', '8th Level', '9th Level']\r\n    }\r\n    render() {\r\n        return (\r\n            <div className='spellSlotsTable' style={{ 'marginBottom': '10px' }}>\r\n                {this.props.mobileTable ?\r\n                    <Table unstackable definition celled style={{ 'marginBottom': '20px' }}>\r\n                        <Table.Header fullWidth>\r\n                            <Table.Row>\r\n                                <Table.HeaderCell colSpan='2'>\r\n                                    <h3 style={{ display: 'inline' }}>Spell Slots</h3>\r\n                                    <Button size='small' content='Refill Spell Slots' style={{ marginLeft: '10px' }} onClick={() => this.props.refillSpellSlots()} />\r\n                                </Table.HeaderCell>\r\n                            </Table.Row>\r\n                        </Table.Header>\r\n                        <Table.Body className='spellSlotNumbers'>\r\n                            {this.props.spellSlots.map((el, index) =>\r\n                                <Table.Row key={this.spellSlotHeaders[index]}>\r\n                                    <Table.Cell>{this.spellSlotHeaders[index]}</Table.Cell>\r\n                                    <Table.Cell key={index}>\r\n                                        {el[0] + ' / '}\r\n                                        <Input size='small' className='setSpellSlotMax' type='number'\r\n                                            value={el[1].toString()}\r\n                                            onChange={(event, data) =>\r\n                                                this.props.setMaxSpellSlots(index + 1, parseInt(data.value))} />\r\n                                    </Table.Cell>\r\n                                </Table.Row>)}\r\n                        </Table.Body>\r\n                    </Table>\r\n                    :\r\n                    <Table celled style={{ 'marginBottom': '20px' }}>\r\n                        <Table.Header>\r\n                            <Table.Row>\r\n                                <Table.HeaderCell colSpan='9'>\r\n                                    <h3 style={{ display: 'inline' }}>Spell Slots</h3>\r\n                                    <Button size='small' content='Refill Spell Slots' style={{ marginLeft: '10px' }} onClick={() => this.props.refillSpellSlots()} />\r\n                                </Table.HeaderCell>\r\n                            </Table.Row>\r\n                        </Table.Header>\r\n                        <Table.Header>\r\n                            <Table.Row>\r\n                                {this.spellSlotHeaders.map(el =>\r\n                                    <Table.HeaderCell key={el[0]}>{el}</Table.HeaderCell>)}\r\n                            </Table.Row>\r\n                        </Table.Header>\r\n                        <Table.Body className='spellSlotNumbers'>\r\n                            <Table.Row>\r\n                                {this.props.spellSlots.map((el, index) =>\r\n                                    <Table.Cell key={index}>\r\n                                        {el[0] + ' / '}\r\n                                        <Input size='small' className='setSpellSlotMax' type='number'\r\n                                            value={el[1].toString()}\r\n                                            onChange={(event, data) =>\r\n                                                this.props.setMaxSpellSlots(index + 1, parseInt(data.value))} />\r\n                                    </Table.Cell>)}\r\n                            </Table.Row>\r\n                        </Table.Body>\r\n                    </Table>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return { spellSlots: state.spellSlots };\r\n};\r\n\r\nexport default connect(mapStateToProps, { setMaxSpellSlots, refillSpellSlots })(SpellSlots);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Icon } from \"semantic-ui-react\";\r\nimport FilterSpells from './FilterSpells';\r\nimport SortSpells from './SortSpells';\r\nimport SpellList from './SpellList';\r\nimport SpellSlots from './SpellSlots';\r\n\r\nclass DailySpells extends Component {\r\n  render() {\r\n    return (\r\n      <div className='tabContent dailySpells'>\r\n        <SpellSlots mobileTable={this.props.windowWidth <= 767} />\r\n        <FilterSpells tabName='dailySpells' />\r\n        <SortSpells tabName='dailySpells' />\r\n        <h3 style={{textAlign: 'center'}}><Icon name='magic'/> Prepared Spells</h3>\r\n        <SpellList tabName='dailySpells'\r\n          spells={this.props.dailySpells} />\r\n      </div>);\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return { dailySpells: state.dailySpells };\r\n};\r\n\r\nexport default connect(mapStateToProps)(DailySpells);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Icon } from \"semantic-ui-react\";\r\nimport FilterSpells from './FilterSpells';\r\nimport SortSpells from './SortSpells';\r\nimport SpellList from './SpellList';\r\nimport { selectAllSpellsSpell } from \"../actions\";\r\n\r\nclass AllSpells extends Component {\r\n  render() {\r\n    return (\r\n      <div className='tabContent'>\r\n        <FilterSpells tabName='allSpells' />\r\n        <SortSpells tabName='allSpells' />\r\n        {this.props.showHeader ? <h3 style={{textAlign: 'center'}}><Icon name='list' /> All Spells </h3> : null}\r\n        <SpellList tabName='allSpells'\r\n          spells={this.props.apiData.spells}\r\n          spellListMonitors={this.props.spellbookSpells}\r\n          selectSpellAction={spell => this.props.selectAllSpellsSpell(spell)} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    apiData: state.apiData,\r\n    spellbookSpells: state.spellbookSpells,\r\n    selectedFilters: state.selectedFilters\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { selectAllSpellsSpell })(AllSpells);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Message } from \"semantic-ui-react\";\r\nimport { closeErrorMessage } from \"../actions\";\r\n\r\nclass ErrorMessage extends Component {\r\n    handleDismiss = () => {\r\n        this.props.closeErrorMessage();\r\n    }\r\n    render() {\r\n        if (this.props.errorMessage.active) {\r\n            return (\r\n                <div className='error-message-container popout' style={{'textAlign': 'center'}}>\r\n                    <Message onDismiss={() => this.handleDismiss()} negative>\r\n                        <Message.Header>{this.props.errorMessage.type}</Message.Header>\r\n                        <p>{this.props.errorMessage.message}</p>\r\n                    </Message>\r\n                </div>\r\n            );\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        errorMessage: state.errorMessage\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, { closeErrorMessage })(ErrorMessage);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Loader, Dimmer, Message, Sidebar, Menu, Segment, Popup, Button, Icon } from \"semantic-ui-react\";\r\nimport Spellbook from \"./Spellbook\";\r\nimport DailySpells from \"./DailySpells\";\r\nimport AllSpells from \"./AllSpells\";\r\nimport ErrorMessage from \"./ErrorMessage\";\r\nimport { fetchAPIData, getCurrentUser, checkLogInStatus, appReadytoRender } from \"../actions\"\r\n\r\nclass App extends Component {\r\n  state = {\r\n    activeItem: 'Prepared Spells',\r\n    windowWidth: document.documentElement.clientWidth,\r\n    mobileSidebarVisible: false\r\n  };\r\n\r\n  handleItemClick = (e, { name }) => {\r\n    this.setState({ activeItem: name, mobileSidebarVisible: false });\r\n  };\r\n\r\n  async componentDidMount() {\r\n    try {\r\n      await this.props.fetchAPIData();\r\n      await this.props.checkLogInStatus();\r\n      await this.props.getCurrentUser();\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n    window.addEventListener('resize', () => {\r\n      this.setState({ windowWidth: document.documentElement.clientWidth })\r\n    });\r\n    this.props.appReadytoRender();\r\n  };\r\n\r\n  renderActiveTab() {\r\n    if (this.state.activeItem === 'Prepared Spells') {\r\n      return <DailySpells windowWidth={this.state.windowWidth} />;\r\n    } else if (this.state.activeItem === 'Spell Book') {\r\n      return <Spellbook showHeader={this.state.windowWidth <= 767} />;\r\n    } else if (this.state.activeItem === 'All Spells') {\r\n      return <AllSpells showHeader={this.state.windowWidth <= 767} />;\r\n    } else {\r\n      return <DailySpells windowWidth={this.state.windowWidth} />;\r\n    }\r\n  }\r\n\r\n  renderLoginMenuItem() {\r\n    if (this.props.currentUser) {\r\n      return <Menu.Item name='Log Out' icon='log out' href='/api/logout' />;\r\n    }\r\n    return (\r\n      <Popup on='click' position='bottom right'\r\n        trigger={<Menu.Item icon='user circle' content='Log In' disabled={!this.props.loginStatus} />}\r\n        content={\r\n          <div className='login-container'>\r\n            <Button style={{ 'marginTop': '10px' }} color='red' href='/auth/google'>\r\n              <Icon name='google' />\r\n          Sign in with Google\r\n        </Button>\r\n            <Button style={{ 'marginTop': '10px' }} color='blue' href='/auth/facebook'>\r\n              <Icon name='facebook' />\r\n          Sign in with Facebook\r\n        </Button>\r\n          </div>} />);\r\n  }\r\n\r\n  renderDesktopApp() {\r\n    const { activeItem } = this.state;\r\n    return (\r\n      <div>\r\n        <Menu size='large' attached='top' tabular>\r\n          <Menu.Item\r\n            name='Prepared Spells'\r\n            icon='magic'\r\n            active={activeItem === 'Prepared Spells'}\r\n            onClick={this.handleItemClick} />\r\n          <Menu.Item\r\n            name='Spell Book'\r\n            icon='book'\r\n            active={activeItem === 'Spell Book'}\r\n            onClick={this.handleItemClick} />\r\n          <Menu.Item\r\n            name='All Spells'\r\n            icon='list'\r\n            active={activeItem === 'All Spells'}\r\n            onClick={this.handleItemClick} />\r\n          <Menu.Item style={{ marginLeft: 'auto', marginRight: 'auto' }}>\r\n            <img alt='wizard hat' src='wizard-hat.png' style={{ height: '30px', width: '30px', marginRight: '10px' }} />\r\n            <h3 style={{ margin: '0' }}>Enchant</h3>\r\n          </Menu.Item>\r\n          <Menu.Menu position='right'>\r\n            <Menu.Item icon='help circle' href='https://github.com/niktill/enchant' target='_blank' link />\r\n            {this.renderLoginMenuItem()}\r\n          </Menu.Menu>\r\n        </Menu>\r\n        <Segment attached='bottom'>\r\n          {this.renderActiveTab()}\r\n        </Segment>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderMobileApp() {\r\n    const { activeItem } = this.state;\r\n    return (\r\n      <Sidebar.Pushable as={Segment} style={{ marginTop: '0' }}>\r\n        <Sidebar\r\n          as={Menu}\r\n          animation='overlay'\r\n          onHide={() => this.setState({ mobileSidebarVisible: false })}\r\n          vertical\r\n          visible={this.state.mobileSidebarVisible}>\r\n          <Menu.Item\r\n            name='Prepared Spells'\r\n            icon='magic'\r\n            active={activeItem === 'Prepared Spells'}\r\n            onClick={this.handleItemClick} />\r\n          <Menu.Item\r\n            name='Spell Book'\r\n            icon='book'\r\n            active={activeItem === 'Spell Book'}\r\n            onClick={this.handleItemClick} />\r\n          <Menu.Item\r\n            icon='list'\r\n            name='All Spells'\r\n            active={activeItem === 'All Spells'}\r\n            onClick={this.handleItemClick} />\r\n          <Menu.Item content='Help' icon='help circle' href='https://github.com/niktill/enchant' target='_blank' link />\r\n        </Sidebar>\r\n\r\n        <Sidebar.Pusher dimmed={this.state.mobileSidebarVisible}>\r\n          <Menu className='mobileNav' borderless>\r\n            <Menu.Item position='left'>\r\n              <Icon size='large' name='bars' onClick={() => this.setState({ mobileSidebarVisible: true })} />\r\n            </Menu.Item>\r\n            <Menu.Item style={{ marginLeft: 'auto', marginRight: 'auto' }}>\r\n              <img alt='wizard hat' src='wizard-hat.png' style={{ height: '30px', width: '30px', marginRight: '10px' }} />\r\n              <h3 style={{ margin: '0' }}>Enchant</h3>\r\n            </Menu.Item>\r\n            <Menu.Menu position='right'>\r\n              {this.renderLoginMenuItem()}\r\n            </Menu.Menu>\r\n          </Menu>\r\n          {this.renderActiveTab()}\r\n        </Sidebar.Pusher>\r\n      </Sidebar.Pushable>\r\n    );\r\n  }\r\n\r\n  renderAppOnFetchComplete() {\r\n    if (this.props.appReady && !this.props.apiData.error) {\r\n      return this.state.windowWidth <= 767 ? this.renderMobileApp() : this.renderDesktopApp()\r\n    }\r\n    return null;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Dimmer.Dimmable>\r\n        <Dimmer active={!this.props.appReady || this.props.apiData.error}>\r\n          <div className='popout'>\r\n            <img alt='wizard hat' className='wizard-hat-img' src='/wizard-hat.png'\r\n              style={{ 'position': 'relative', 'bottom': this.props.apiData.error ? '0' : '120px' }} />\r\n            {this.props.apiData.error ?\r\n              <Message size='large' negative>\r\n                <Message.Header>Error in loading Enchant</Message.Header>\r\n                <p>We had issues preparing our spells. Please refresh page to try again.</p>\r\n              </Message>\r\n              :\r\n              <Loader style={{whiteSpace: 'nowrap'}} size='massive' content={'Loading Enchant'} />}\r\n          </div>\r\n        </Dimmer>\r\n        {this.renderAppOnFetchComplete()}\r\n        <ErrorMessage className='enchant-error-message' />\r\n      </Dimmer.Dimmable>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    apiData: state.apiData,\r\n    currentUser: state.currentUser,\r\n    errorMessage: state.errorMessage,\r\n    loginStatus: state.loginStatus,\r\n    appReady: state.appReady\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { fetchAPIData, getCurrentUser, checkLogInStatus, appReadytoRender })(App);\r\n","import { combineReducers } from 'redux';\r\n\r\n// reducer to check status of login\r\nconst loginStatusReducer = (loginStatus=0, action) => {\r\n    if (action.type === 'LOG_IN_STATUS_SUCCESS') {\r\n        return true;\r\n    } else if (action.type === 'LOG_IN_STATUS_FAIL') {\r\n        return false;\r\n    }\r\n    return loginStatus;\r\n};\r\n\r\n// reducer to help determine if user is logged in\r\nconst authReducer = (user=null, action) => {\r\n    if (action.type === 'FETCH_USER') {\r\n        return action.payload || false;\r\n    }\r\n    return user;\r\n};\r\n\r\n// Reducer for fetching API data\r\nconst fetchAPIDataReducer = (apiData = {}, action) => {\r\n    if (action.type === 'API_DATA_FETCHED') {\r\n        apiData = action.payload;\r\n        apiData.complete = true;\r\n    } else if (action.type === 'API_DATA_ERROR') {\r\n        apiData = { ...apiData, error: true };\r\n    }\r\n    return apiData;\r\n};\r\n\r\n// Reducer to check when App is ready to render\r\nconst appReadyReducer = (appReady=false, action) => {\r\n    if (action.type === 'APP_READY') {\r\n        return true\r\n    }\r\n    return appReady;\r\n};\r\n\r\n// Reducer that manages spells in spell book\r\nconst spellbookSpellsReducer = (spellBookSpells = [], action) => {\r\n    if (action.type === 'FETCH_USER') {\r\n        if (action.payload.spellBookSpells) {\r\n            return [...action.payload.spellBookSpells];\r\n        }\r\n    }\r\n    else if (action.type === 'ALL_SPELLS_SPELL_SELECT') {\r\n        if (spellBookSpells.some( spell => spell.slug === action.payload.slug)) {\r\n            return spellBookSpells.filter(spell => spell.slug !== action.payload.slug);\r\n        }\r\n        return [...spellBookSpells, action.payload];\r\n    }\r\n    return spellBookSpells;\r\n};\r\n\r\n// Reducer that manages daily spells\r\nconst dailySpellsReducer = (dailySpells = [], action) => {\r\n    if (action.type === 'FETCH_USER') {\r\n        if (action.payload.dailySpells) {\r\n            return [...action.payload.dailySpells];\r\n        }\r\n    }\r\n    else if (action.type === 'SPELLBOOK_SPELL_SELECT') {\r\n        if (dailySpells.some( spell => spell.slug === action.payload.slug)) {\r\n            return dailySpells.filter(spell => spell.slug !== action.payload.slug);\r\n        }\r\n        return [...dailySpells, action.payload];\r\n    } else if (action.type === 'ALL_SPELLS_SPELL_SELECT') {\r\n        return dailySpells.filter(spell => spell.slug !== action.payload.slug);\r\n    }\r\n    return dailySpells;\r\n};\r\n\r\n//Reducer that manages spell filters for different tabs\r\nconst filterDefault = {\r\n    dailySpells: { classes: [], level: [] },\r\n    spellBookSpells: { classes: [], level: [] },\r\n    allSpells: { classes: [], level: [] }\r\n}\r\nconst selectFilterReducer = (spellFilters = filterDefault, action) => {\r\n    if (action.type === 'SPELL_FILTER_CLASS_SELECT') {\r\n        let newFilters = JSON.parse(JSON.stringify(spellFilters));\r\n        let classFilterList = newFilters[action.payload.tabName].classes;\r\n        if (classFilterList.includes(action.payload.spellFilterClassName)) {\r\n            newFilters[action.payload.tabName].classes = classFilterList.filter(\r\n                spellFilterClassName => spellFilterClassName !== action.payload.spellFilterClassName);\r\n            return newFilters;\r\n        }\r\n        newFilters[action.payload.tabName].classes = [...classFilterList, action.payload.spellFilterClassName];\r\n        return newFilters;\r\n    }\r\n    return spellFilters;\r\n};\r\n\r\n//Reducer that manages spell sorting for different tabs\r\nconst sortDefault = {\r\n    dailySpells: 'level_int',\r\n    spellBookSpells: 'level_int',\r\n    allSpells: 'level_int'\r\n}\r\nconst selectSortingReducer = (spellSorters = sortDefault, action) => {\r\n    if (action.type === 'SORT_SPELLS_SELECT') {\r\n        return { ...spellSorters, [action.payload.tabName]: action.payload.sorterName };\r\n    }\r\n    return spellSorters;\r\n};\r\n\r\n// Reducer for spells slots used\r\n// format of spellSlotsDefault array: index + 1 = spell level, \r\n// each sub-array element in array is [currentSpellSlots, maxSpellSlot] \r\n// (e.g. spellSlotsDefault[0][0] = current spell slots left for 1st level spells)\r\nconst spellSlotsDefault = [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]];\r\nconst spellSlotsReducer = (spellSlots = spellSlotsDefault, action) => {\r\n    if (action.type === 'FETCH_USER') {\r\n        if (action.payload.spellSlots) {\r\n            return action.payload.spellSlots;\r\n        }\r\n    } else if (action.type === 'REFILL_SPELL_SLOTS') {\r\n        return spellSlots.map(el => [el[1], el[1]]);\r\n    } else if (action.type === 'CAST_SPELL') {\r\n        return spellSlots.map((el, index) => index + 1 === action.payload.spellLevel ? [el[0] - 1, el[1]] : el);\r\n    } else if (action.type === 'SET_MAX_SPELL_SLOTS') {\r\n        const newCurSpellSlots = (spellSlots[action.payload.spellLevel - 1][0] > action.payload.maxSpellSlots) ?\r\n            action.payload.maxSpellSlots : spellSlots[action.payload.spellLevel - 1][0]\r\n        return spellSlots.map((el, index) => ((index + 1) === action.payload.spellLevel) ?\r\n            [newCurSpellSlots, action.payload.maxSpellSlots] : el);\r\n    }\r\n    return spellSlots;\r\n};\r\n\r\n// Send error message reducer\r\nconst sendErrorMessageReducer = (errorMessage={}, action) => {\r\n    if (action.type === 'ACTIVATE_ERROR_MESSAGE') {\r\n        return { type: action.payload.type, message: action.payload.message, active: true};\r\n    } else if (action.type === 'CLOSE_ERROR_MESSAGE') {\r\n        return {...errorMessage, active: false}\r\n    }\r\n    return {...errorMessage}\r\n};\r\n\r\nexport default combineReducers({\r\n    apiData: fetchAPIDataReducer,\r\n    spellbookSpells: spellbookSpellsReducer,\r\n    dailySpells: dailySpellsReducer,\r\n    selectedFilters: selectFilterReducer,\r\n    selectedSorter: selectSortingReducer,\r\n    spellSlots: spellSlotsReducer,\r\n    currentUser: authReducer,\r\n    errorMessage: sendErrorMessageReducer,\r\n    loginStatus: loginStatusReducer,\r\n    appReady: appReadyReducer\r\n});","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nimport App from \"./components/App\";\r\nimport reducers from \"./reducers\";\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunk));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}